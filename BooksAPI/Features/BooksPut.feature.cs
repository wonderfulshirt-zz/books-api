// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BooksAPI.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("BooksPut", SourceFile="Features\\BooksPut.feature", SourceLine=0)]
    public partial class BooksPutFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BooksPut.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BooksPut", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void UpdateBook(string id, string propertyToUpdate, string newValue, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update book", null, exampleTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
 testRunner.Given(string.Format("I create a new Book ({0}, James Herbert, The Rats, Scary book about giant rats)", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.When(string.Format("I update {0} with {1}", propertyToUpdate, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 7
 testRunner.And("the response body should contain the expected book object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book, 300", SourceLine=10)]
        public virtual void UpdateBook_300()
        {
#line 3
this.UpdateBook("300", "Author", "Updated Author", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book, 301", SourceLine=10)]
        public virtual void UpdateBook_301()
        {
#line 3
this.UpdateBook("301", "Title", "Updated Title", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book, 302", SourceLine=10)]
        public virtual void UpdateBook_302()
        {
#line 3
this.UpdateBook("302", "Description", "Updated Description", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book, 303", SourceLine=10)]
        public virtual void UpdateBook_303()
        {
#line 3
this.UpdateBook("303", "Author", "!\\\"£$%^&*()\',./<>?\\`_+-=", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book, 304", SourceLine=10)]
        public virtual void UpdateBook_304()
        {
#line 3
this.UpdateBook("304", "Title", "!\\\"£$%^&*()\',./<>?\\`_+-=", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book, 305", SourceLine=10)]
        public virtual void UpdateBook_305()
        {
#line 3
this.UpdateBook("305", "Description", "!\\\"£$%^&*()\',./<>?\\`_+-=", "200", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdateBookSucceedsWhereAPropertyIsUpdatedToItsMaxAllowedSize(string id, string propertyToUpdate, string newValue, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update book succeeds where a property is updated to its max allowed size", null, exampleTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 19
 testRunner.Given(string.Format("I create a new Book ({0}, James Herbert, The Rats, Scary book about giant rats)", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When(string.Format("I update {0} with {1}", propertyToUpdate, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
 testRunner.And("the response body should contain the expected book object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book succeeds where a property is updated to its max allowed size, 306", SourceLine=25)]
        public virtual void UpdateBookSucceedsWhereAPropertyIsUpdatedToItsMaxAllowedSize_306()
        {
#line 18
this.UpdateBookSucceedsWhereAPropertyIsUpdatedToItsMaxAllowedSize("306", "Author", "123456789012345678901234567MAX", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book succeeds where a property is updated to its max allowed size, 307", SourceLine=25)]
        public virtual void UpdateBookSucceedsWhereAPropertyIsUpdatedToItsMaxAllowedSize_307()
        {
#line 18
this.UpdateBookSucceedsWhereAPropertyIsUpdatedToItsMaxAllowedSize("307", "Title", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
                    "2345678901234567890", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book succeeds where a property is updated to its max allowed size, 308", SourceLine=25)]
        public virtual void UpdateBookSucceedsWhereAPropertyIsUpdatedToItsMaxAllowedSize_308()
        {
#line 18
this.UpdateBookSucceedsWhereAPropertyIsUpdatedToItsMaxAllowedSize("308", "Description", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
                    "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
                    "234567890123456789012345678901234567890", "200", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdateBookFailsWhereAPropertyIsUpdatedToExceedItsMaxAllowedSize(string id, string propertyToUpdate, string newValue, string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update book fails where a property is updated to exceed its max allowed size", null, exampleTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 31
 testRunner.Given(string.Format("I create a new Book ({0}, James Herbert, The Rats, Scary book about giant rats)", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When(string.Format("I update {0} with {1}", propertyToUpdate, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book fails where a property is updated to exceed its max allowed size, 309" +
            "", SourceLine=37)]
        public virtual void UpdateBookFailsWhereAPropertyIsUpdatedToExceedItsMaxAllowedSize_309()
        {
#line 30
this.UpdateBookFailsWhereAPropertyIsUpdatedToExceedItsMaxAllowedSize("309", "Author", "123456789012345678901234567MAX1", "400", "Book.Author should not exceed 30 characters!", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book fails where a property is updated to exceed its max allowed size, 310" +
            "", SourceLine=37)]
        public virtual void UpdateBookFailsWhereAPropertyIsUpdatedToExceedItsMaxAllowedSize_310()
        {
#line 30
this.UpdateBookFailsWhereAPropertyIsUpdatedToExceedItsMaxAllowedSize("310", "Title", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
                    "23456789012345678901", "400", "Book.Title should not exceed 100 characters!", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdateBookFailsWhenAttemptingToUpdateId(string id, string propertyToUpdate, string newValue, string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update book fails when attempting to update Id", null, exampleTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 42
 testRunner.Given(string.Format("I create a new Book ({0}, James Herbert, The Rats, Scary book about giant rats)", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When(string.Format("I update {0} with {1}", propertyToUpdate, newValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book fails when attempting to update Id, 312", SourceLine=48)]
        public virtual void UpdateBookFailsWhenAttemptingToUpdateId_312()
        {
#line 41
this.UpdateBookFailsWhenAttemptingToUpdateId("312", "Id", "399", "400", "Book.Id cannot be updated!", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdateBookSucceedsWhenDescriptionIsOmittedFromTheRequestBody(string id, string author, string title, string description, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update book succeeds when Description is omitted from the request body", null, exampleTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 52
 testRunner.Given(string.Format("I create a new Book ({0}, {1}, {2}, {3})", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
 testRunner.When("I omit Description from an update request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
 testRunner.And(string.Format("Description still has its original value of {0}", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book succeeds when Description is omitted from the request body, 313", SourceLine=58)]
        public virtual void UpdateBookSucceedsWhenDescriptionIsOmittedFromTheRequestBody_313()
        {
#line 51
this.UpdateBookSucceedsWhenDescriptionIsOmittedFromTheRequestBody("313", "James Herbert", "The Rats", "Scary book about giant rats", "200", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdateBookFailsWhenAuthorIsOmittedFromTheRequestBody(string id, string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update book fails when Author is omitted from the request body", null, exampleTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 62
 testRunner.Given(string.Format("I create a new Book ({0}, James Herbert, The Rats, Scary book about giant rats)", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
 testRunner.When("I omit Author from an update request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 65
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book fails when Author is omitted from the request body, 314", SourceLine=68)]
        public virtual void UpdateBookFailsWhenAuthorIsOmittedFromTheRequestBody_314()
        {
#line 61
this.UpdateBookFailsWhenAuthorIsOmittedFromTheRequestBody("314", "400", "Book.Author is a required field", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdateBookFailsWhenTitleIsOmittedFromTheRequestBody(string id, string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update book fails when Title is omitted from the request body", null, exampleTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 72
 testRunner.Given(string.Format("I create a new Book ({0}, James Herbert, The Rats, Scary book about giant rats)", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
 testRunner.When("I omit Title from an update request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book fails when Title is omitted from the request body, 315", SourceLine=78)]
        public virtual void UpdateBookFailsWhenTitleIsOmittedFromTheRequestBody_315()
        {
#line 71
this.UpdateBookFailsWhenTitleIsOmittedFromTheRequestBody("315", "400", "Book.Title is a required field", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdateBookFailsWhenIdIsOmittedFromTheRequestBody(string id, string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update book fails when Id is omitted from the request body", null, exampleTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 83
 testRunner.Given(string.Format("I create a new Book ({0}, James Herbert, The Rats, Scary book about giant rats)", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.When("I omit Id from an update request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update book fails when Id is omitted from the request body, 316", SourceLine=89)]
        public virtual void UpdateBookFailsWhenIdIsOmittedFromTheRequestBody_316()
        {
#line 82
this.UpdateBookFailsWhenIdIsOmittedFromTheRequestBody("316", "400", "Book.Id should be a positive integer!", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
