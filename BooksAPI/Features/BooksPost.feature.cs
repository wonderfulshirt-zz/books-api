// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BooksAPI.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("BooksPost", SourceFile="Features\\BooksPost.feature", SourceLine=0)]
    public partial class BooksPostFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BooksPost.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BooksPost", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void AddBook(string id, string author, string title, string description, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add book", null, exampleTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
 testRunner.Given(string.Format("I create a new Book ({0}, {1}, {2}, {3})", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 6
 testRunner.And("the response body should contain the expected book object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book, 1", SourceLine=9)]
        public virtual void AddBook_1()
        {
#line 3
this.AddBook("1", "James Herbert", "The Rats", "Scary book about giant rats", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book, 2", SourceLine=9)]
        public virtual void AddBook_2()
        {
#line 3
this.AddBook("2", "!\\\"£$%^&*()\',./<>?\\`_+-=", "Special chars", "Special chars", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book, 3", SourceLine=9)]
        public virtual void AddBook_3()
        {
#line 3
this.AddBook("3", "Special chars", "!\\\"£$%^&*()\',./<>?\\`_+-=", "Special chars", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book, 4", SourceLine=9)]
        public virtual void AddBook_4()
        {
#line 3
this.AddBook("4", "Special chars", "Special chars", "!\\\"£$%^&*()\',./<>?\\`_+-=", "200", ((string[])(null)));
#line hidden
        }
        
        public virtual void AddBookSucceedsWhenDescriptionIsOmittedFromTheRequestBody(string id, string author, string title, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add book succeeds when Description is omitted from the request body", null, exampleTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 16
testRunner.Given(string.Format("I create a new Book with no Description ({0}, {1}, {2})", id, author, title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book succeeds when Description is omitted from the request body, 5", SourceLine=20)]
        public virtual void AddBookSucceedsWhenDescriptionIsOmittedFromTheRequestBody_5()
        {
#line 15
this.AddBookSucceedsWhenDescriptionIsOmittedFromTheRequestBody("5", "James Herbert", "The Rats", "200", ((string[])(null)));
#line hidden
        }
        
        public virtual void AddBookSucceedsWhereAPropertyIsItsMaxAllowedSize(string id, string author, string title, string description, string statusCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add book succeeds where a property is its max allowed size", null, exampleTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 24
 testRunner.Given(string.Format("I create a new Book ({0}, {1}, {2}, {3})", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.And("the response body should contain the expected book object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book succeeds where a property is its max allowed size, 7", SourceLine=29)]
        public virtual void AddBookSucceedsWhereAPropertyIsItsMaxAllowedSize_7()
        {
#line 23
this.AddBookSucceedsWhereAPropertyIsItsMaxAllowedSize("7", "123456789012345678901234567MAX", "The 39 Steps", "Author Max length", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book succeeds where a property is its max allowed size, 8", SourceLine=29)]
        public virtual void AddBookSucceedsWhereAPropertyIsItsMaxAllowedSize_8()
        {
#line 23
this.AddBookSucceedsWhereAPropertyIsItsMaxAllowedSize("8", "Terry Pratchett", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
                    "2345678901234567890", "Title Max length", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book succeeds where a property is its max allowed size, 9", SourceLine=29)]
        public virtual void AddBookSucceedsWhereAPropertyIsItsMaxAllowedSize_9()
        {
#line 23
this.AddBookSucceedsWhereAPropertyIsItsMaxAllowedSize("9", "Dean R Koontz", "No max length for Decription in the spec but for good measure... 100 chars", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
                    "23456789012345678901234567890123456789012345678901234567890123456789012345678901" +
                    "234567890123456789012345678901234567890", "200", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book succeeds where a property is its max allowed size, 2147483647", SourceLine=29)]
        public virtual void AddBookSucceedsWhereAPropertyIsItsMaxAllowedSize_2147483647()
        {
#line 23
this.AddBookSucceedsWhereAPropertyIsItsMaxAllowedSize("2147483647", "Max Int32", "The Big Number Book", "Scary book about giant rats", "200", ((string[])(null)));
#line hidden
        }
        
        public virtual void AddBookFailsWhereAPropertyExceedsItsMaxAllowedLength(string id, string author, string title, string description, string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add book fails where a property exceeds its max allowed length", null, exampleTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 37
 testRunner.Given(string.Format("I create a new Book ({0}, {1}, {2}, {3})", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book fails where a property exceeds its max allowed length, 11", SourceLine=42)]
        public virtual void AddBookFailsWhereAPropertyExceedsItsMaxAllowedLength_11()
        {
#line 36
this.AddBookFailsWhereAPropertyExceedsItsMaxAllowedLength("11", "1234567890123456789012345678901", "Test title", "Author Max length + 1", "400", "Book.Author should not exceed 30 characters!", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book fails where a property exceeds its max allowed length, 12", SourceLine=42)]
        public virtual void AddBookFailsWhereAPropertyExceedsItsMaxAllowedLength_12()
        {
#line 36
this.AddBookFailsWhereAPropertyExceedsItsMaxAllowedLength("12", "Test author", "123456789012345678901234567890123456789012345678901234567890123456789012345678901" +
                    "23456789012345678901", "Title Max length + 1", "400", "Book.Title should not exceed 100 characters!", ((string[])(null)));
#line hidden
        }
        
        public virtual void AddBookFailsWhereTheValueOfIdIsGreaterThanInt32MaxValue(string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add book fails where the value of Id is greater than Int32 max value", null, exampleTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 47
 testRunner.Given("I create a new Book with an Id greater than Int32 max value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book fails where the value of Id is greater than Int32 max value, 400", SourceLine=52)]
        public virtual void AddBookFailsWhereTheValueOfIdIsGreaterThanInt32MaxValue_400()
        {
#line 46
this.AddBookFailsWhereTheValueOfIdIsGreaterThanInt32MaxValue("400", "Expecting a message relating to the value of Book.Id. Instead I get \'Book should " +
                    "be provided!\'", ((string[])(null)));
#line hidden
        }
        
        public virtual void AddBookFailsWhenIdIsOmittedFromTheRequestBody(string author, string title, string description, string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add book fails when Id is omitted from the request body", null, exampleTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 56
 testRunner.Given(string.Format("I create a new Book with no Id ({0}, {1}, {2})", author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book fails when Id is omitted from the request body, Test author", SourceLine=61)]
        public virtual void AddBookFailsWhenIdIsOmittedFromTheRequestBody_TestAuthor()
        {
#line 55
this.AddBookFailsWhenIdIsOmittedFromTheRequestBody("Test author", "Test title", "Test description", "400", "Book.Id should be a positive integer!", ((string[])(null)));
#line hidden
        }
        
        public virtual void AddBookFailsWhenAuthorIsOmittedFromTheRequestBody(string id, string title, string description, string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add book fails when Author is omitted from the request body", null, exampleTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 65
 testRunner.Given(string.Format("I create a new Book with no Author ({0}, {1}, {2})", id, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book fails when Author is omitted from the request body, 20", SourceLine=70)]
        public virtual void AddBookFailsWhenAuthorIsOmittedFromTheRequestBody_20()
        {
#line 64
this.AddBookFailsWhenAuthorIsOmittedFromTheRequestBody("20", "Test title", "Test description", "400", "Book.Author is a required field", ((string[])(null)));
#line hidden
        }
        
        public virtual void AddBookFailsWhenTitleIsOmittedFromTheRequestBody(string id, string author, string description, string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add book fails when Title is omitted from the request body", null, exampleTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 74
 testRunner.Given(string.Format("I create a new Book with no Title ({0}, {1}, {2})", id, author, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book fails when Title is omitted from the request body, 21", SourceLine=79)]
        public virtual void AddBookFailsWhenTitleIsOmittedFromTheRequestBody_21()
        {
#line 73
this.AddBookFailsWhenTitleIsOmittedFromTheRequestBody("21", "Test Author", "Test description", "400", "Book.Title is a required field", ((string[])(null)));
#line hidden
        }
        
        public virtual void AddBookFailsWhenIdIsANegativeInteger(string id, string author, string title, string description, string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add book fails when Id is a negative integer", null, exampleTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 83
 testRunner.Given(string.Format("I create a new Book ({0}, {1}, {2}, {3})", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add book fails when Id is a negative integer, -1", SourceLine=88)]
        public virtual void AddBookFailsWhenIdIsANegativeInteger_1()
        {
#line 82
this.AddBookFailsWhenIdIsANegativeInteger("-1", "Test author", "Test title", "Test description", "400", "Book.Id should be a positive integer!", ((string[])(null)));
#line hidden
        }
        
        public virtual void AddingASecondBookWithTheSameIDFails(string id, string author, string title, string description, string statusCode, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a second book with the same ID fails", null, exampleTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 92
 testRunner.Given(string.Format("I create a new Book ({0}, {1}, {2}, {3})", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
 testRunner.And(string.Format("I create a new Book ({0}, {1}, {2}, {3})", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.Then(string.Format("the system should return {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 95
 testRunner.And(string.Format("the error response should contain the message {0}", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Adding a second book with the same ID fails, 99", SourceLine=98)]
        public virtual void AddingASecondBookWithTheSameIDFails_99()
        {
#line 91
this.AddingASecondBookWithTheSameIDFails("99", "Test author", "Test title", "Test description", "400", "Book with id 99 already exists!", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
